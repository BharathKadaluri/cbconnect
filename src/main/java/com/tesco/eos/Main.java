package com.tesco.eos;

import com.couchbase.kafka.CouchbaseKafkaConnector;
import com.couchbase.kafka.DefaultCouchbaseKafkaEnvironment;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@SpringBootApplication
@EnableAsync
public class Main  {
    public boolean someLibraryMethod() {
        return true;
    }

    @Autowired
    private Appconfig appconfig;

    public static void main(String[] args) {
        SpringApplication.run(Main.class, args);
    }

    @Bean
    public CouchbaseKafkaConnector kafkaConnector() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        System.out.println(objectMapper.writeValueAsString(appconfig));
        DefaultCouchbaseKafkaEnvironment.Builder builder =
                (DefaultCouchbaseKafkaEnvironment.Builder) DefaultCouchbaseKafkaEnvironment
                        .builder()
                        .kafkaFilterClass("com.tesco.eos.kafka.KafkaFilter")
                        .kafkaValueSerializerClass("com.tesco.eos.kafka.KafkaEncoder")
                        .kafkaTopic(appconfig.getKafkaTopic())
                        .kafkaZookeeperAddress(appconfig.getZooKeeperServers())
                        .couchbaseNodes(appconfig.getCouchbaseServer())
                        .couchbaseBucket(appconfig.getCouchbaseBucket())
                        //.couchbasePassword(appconfig.getCouchbasePassword())
                        .dcpEnabled(true);
        CouchbaseKafkaConnector connector = CouchbaseKafkaConnector.create(builder.build());
        return connector;
    }

    @Bean(name="processExecutor")
    public TaskExecutor workExecutor() {
        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
        threadPoolTaskExecutor.setThreadNamePrefix("Async-");
        threadPoolTaskExecutor.setCorePoolSize(3);
        threadPoolTaskExecutor.setMaxPoolSize(3);
        threadPoolTaskExecutor.setQueueCapacity(600);
        threadPoolTaskExecutor.afterPropertiesSet();
        return threadPoolTaskExecutor;
    }

}
